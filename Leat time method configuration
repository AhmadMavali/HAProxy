
#In this example configuration:
#The global and defaults sections define global and default settings, similar to the previous examples.
#The frontend section defines a frontend named "web" that binds to all IP addresses on port 80.
#The default_backend directive specifies that requests received by the frontend should be forwarded to the backend named "servers".
#The backend section defines the backend named "servers" and specifies the load balancing method as leastconn (which refers to the Least Time method).
#The option httpchk directive enables HTTP health checks for the backend servers. It sends an HTTP HEAD request to the path "/healthcheck" to determine the server's health.
#The http-check expect directive specifies the expected HTTP response status code (200) indicating a healthy server.
#The server directives define the backend servers, similar to the previous examples. Each server's IP address and port are specified, along with the check option to enable health checks.
#With this configuration, incoming requests to HAProxy on port 80 will be distributed to the backend servers using the "Least Time" method. The leastconn algorithm selects the server with the least number of active connections, effectively distributing the load based on the server's current load.
#The option httpchk and http-check expect directives enable health checks to ensure that only healthy servers receive traffic. HAProxy periodically sends an HTTP HEAD request to the "/healthcheck" path of each server and expects a response with the status code 200 to consider the server healthy.
#Please adjust the IP addresses, ports, health check path, expected status code, and any other settings to match your specific environment and requirements.
#I hope this helps!



global
  # Global Settings

defaults
  mode http
  timeout connect 5s
  timeout client 50s
  timeout server 50s

frontend web
  bind *:80
  default_backend servers

backend servers
  balance leastconn
  option httpchk HEAD /healthcheck
  http-check expect status 200
  server server1 192.168.0.10:8080 check
  server server2 192.168.0.11:8080 check
  server server3 192.168.0.12:8080 check

