#In this example:
#The global section defines global settings for HAProxy, including logging, user and group permissions, and daemon mode.
#The defaults section sets default configuration options for all subsequent frontends and backends. It includes settings for logging, HTTP mode, timeouts, and various HTTP options.
#The frontend section named http_frontend is created to handle incoming HTTP traffic on port 80.
#The bind directive specifies that HAProxy should listen on all IP addresses (*) on port 80.
#The mode http directive sets the mode to HTTP.
#The default_backend directive specifies that incoming requests should be forwarded to the backend named http_backend if no other rules match.
#The backend section named http_backend defines the backend servers and their configuration.
#The balance directive is set to roundrobin for round-robin load balancing.
#The option http-server-close directive enables HTTP connection closing after each request/response cycle.
#The option forwardfor directive adds the X-Forwarded-For header to the backend server's request, indicating the original client's IP address.
#The http-response set-header directives set response headers to provide rate limiting information to clients.
#The stick-table directive defines an IP-based stick table to track request rates.
#The http-request track-sc0 src directive enables tracking of the source IP address in stick table sc0 for rate limiting purposes.
#The http-request deny directive denies requests if the request rate from a single source IP exceeds 10 requests per second.
#The http-request lua.rate_limiting directive invokes a Lua script named rate_limiting.lua for response rate limiting logic.
#The lua-load directive specifies the path to the Lua script to be loaded.
#Please adjust the IP addresses, ports, stick table size, rate limits, and backend server configurations to match your specific environment and requirements.
#Remember to ensure that HAProxy is properly installed and configured on your system before using this configuration file. Also, make sure to create the rate_limiting.lua file and place it in the specified path, implementing the desired rate limiting logic.


global
  log /dev/log local0
  log /dev/log local1 notice
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
  stats timeout 30s
  user haproxy
  group haproxy
  daemon

defaults
  log global
  mode http
  option httplog
  option dontlognull
  timeout connect 5s
  timeout client 1m
  timeout server 1m

frontend http_frontend
  bind *:80
  mode http
  default_backend http_backend

backend http_backend
  balance roundrobin
  option http-server-close
  option forwardfor
  http-response set-header X-RateLimit-Limit %[lua.var.limit]
  http-response set-header X-RateLimit-Remaining %[lua.var.remaining]
  http-response set-header X-RateLimit-Reset %[lua.var.reset]
  stick-table type ip size 100k expire 1m store http_req_rate(10s)
  http-request track-sc0 src
  http-request deny if { sc0_http_req_rate(0) gt 10 }
  http-request lua.rate_limiting

lua-load /etc/haproxy/rate_limiting.lua
