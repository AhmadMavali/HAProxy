#in this example configuration:
#The global and defaults sections define global and default settings, similar to the previous examples.
#The frontend section defines a frontend named "web" that binds to all IP addresses on port 80.
#The default_backend directive specifies that requests received by the frontend should be forwarded to the backend named "servers".
#The backend section defines the backend named "servers" and specifies the load balancing method as source (which refers to the Source IP method).
#The stick-table directive configures HAProxy to use a stick table to store client session information. In this example, we're using an IP-based stick table with a size of 10,000 entries.
#The stick on src directive specifies that sticky sessions should be based on the source IP address of the client.
#The stick-store-response directive instructs HAProxy to store a response cookie named "SESSIONID" in the stick table.
#The stick-match directive specifies that sticky sessions should be matched based on the request cookie named "SESSIONID".
#The server directives define the backend servers, similar to the previous examples. Each server's IP address and port are specified, along with the check option to enable health checks.
#With this configuration, incoming requests to HAProxy on port 80 will be distributed to the backend servers based on the source IP address of the client. Sticky sessions are enabled, meaning that requests from the same source IP address will consistently be routed to the same backend server based on the stored "SESSIONID" cookie.
#The stick table is used to maintain session affinity based on the client's IP address. The stick-store-response directive ensures that when a response is sent back to the client, a cookie named "SESSIONID" is stored in the stick table. The stick-match directive then matches subsequent requests based on the presence and value of the "SESSIONID" cookie.
#Please adjust the IP addresses, ports, stick table size, cookie name, and any other settings to match your specific environment and requirements.
#I hope this helps!



global
  # Global Settings

defaults
  mode http
  timeout connect 5s
  timeout client 50s
  timeout server 50s

frontend web
  bind *:80
  default_backend servers

backend servers
  balance source
  stick-table type ip size 10k
  stick on src
  stick-store-response res.cookie(SESSIONID)
  stick-match req.cook(SESSIONID)
  server server1 192.168.0.10:8080 check
  server server2 192.168.0.11:8080 check
  server server3 192.168.0.12:8080 check
